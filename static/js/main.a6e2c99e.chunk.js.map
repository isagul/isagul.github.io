{"version":3,"sources":["assets/images/profile_image.jpg","components/profile.js","components/social-icons.jsx","components/about_me.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Profile","react_default","a","createElement","lib","animationIn","animationOut","isVisible","className","src","require","alt","React","Component","SocialIcons","href","target","rel","AboutMe","App","id","profile_Profile","social_icons_SocialIcons","about_me_AboutMe","dist_default","buttonBackgroundColor","targetId","behavior","Boolean","window","location","hostname","match","library","add","faSmileWink","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oNCGnBC,mLAGb,OACIC,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUC,YAAY,eAAeC,aAAa,UAAUC,WAAW,GACnEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACXP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,EAAQ,IAAuCC,IAAI,0BAC7DV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACXP,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,kEAVaS,IAAMC,WCDtBC,gMAEb,OACIb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACXP,EAAAC,EAAAC,cAAA,KAAGY,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBACpDhB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,0BAEjBP,EAAAC,EAAAC,cAAA,KAAGY,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAC/DhB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,qBAEjBP,EAAAC,EAAAC,cAAA,KAAGY,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBACrDhB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,mBAEjBP,EAAAC,EAAAC,cAAA,KAAGY,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBACvDhB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,mCAdQI,IAAMC,YCA1BK,mLAEb,OACIjB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACXP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,sSAKAF,EAAAC,EAAAC,cAAA,0UAZiBS,IAAMC,4BCsB5BM,mLAbX,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiB,GAAG,SAASZ,UAAU,OACzBP,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,OAEFrB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAcuB,sBAAuB,UAAWC,SAAU,SAAUC,SAAU,mBATpEd,aCGEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECTNC,IAAQC,IAAIC,KAEZC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6e2c99e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_image.efad6a29.jpg\";","import React from 'react';\r\nimport {Animated} from \"react-animated-css\";\r\n\r\nexport default class Profile extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Animated animationIn=\"bounceInDown\" animationOut=\"fadeOut\" isVisible={true}>\r\n                <div className=\"profile\">\r\n                    <img src={require('../assets/images/profile_image.jpg')} alt=\"isa_gul_profile_image\"/>\r\n                    <div className=\"profile-info\">\r\n                        <p>İsa Gül</p>\r\n                        <p>Jr. Front-End Developer</p>    \r\n                        <p>\"I'm gonna start a revolution from my bed\"</p>    \r\n                    </div>\r\n                </div>  \r\n            </Animated>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class SocialIcons extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"icons\">\r\n                <a href=\"https://github.com/isagul\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-github-square\"></i>\r\n                </a>\r\n                <a href=\"https://www.linkedin.com/in/isa-gul/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-linkedin\"></i>\r\n                </a>\r\n                <a href=\"https://medium.com/@isagul\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-medium\"></i>\r\n                </a>\r\n                <a href=\"https://twitter.com/isamigul\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-twitter-square\"></i>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class AboutMe extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"about-me\">\r\n                <div>\r\n                    <h4>BEN KİMİM ?</h4>\r\n                    <p>Merhaba ben İsa. </p>\r\n                    <p>Yolun henüz daha çok başlarında ama sürekli olarak araştırarak\r\n                    kendisini geliştirmeye çalışan \r\n                    bir Front-End geliştiricisiyim. İstanbul'da yaşıyorum. Kendime web teknolojileri alanında\r\n                    bir kariyer hedefliyorum.\r\n                    </p>\r\n                    <p>Şu an ve önümüzdeki uzun bir süre kendimi front-end developer olarak tanımlasam da\r\n                        ileride full-stack developer olmak gibi hedeflerim var. Bu işlerin dışında da donanım programlama\r\n                        konusa da ilgim olduğunu söyleyebilirim ama bu daha çok hobi gibi. :)\r\n                    </p>                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Profile from './components/profile';\r\n\r\nimport './App.scss';\r\nimport './styles/media.query.css';\r\nimport SocialIcons from './components/social-icons';\r\nimport AboutMe from './components/about_me';\r\nimport ScrollButton from 'react-scroll-button';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"topDiv\" className=\"app\">\r\n          <Profile/>\r\n          <SocialIcons/>\r\n        </div>\r\n        <AboutMe/>\r\n        <ScrollButton buttonBackgroundColor={'#CF5050'} targetId={'topDiv'} behavior={'smooth'}/>\r\n      </div>     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faSmileWink } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nlibrary.add(faSmileWink);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}